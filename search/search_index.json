{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"docums-git-authors-plugin Lightweight Docums plugin to display git authors of a markdown page. Setup Install the plugin using pip3: pip3 install docums-git-authors-plugin Next, add the following lines to your docums.yml : plugins : - search - git-authors If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. Docums enables it by default if there is no plugins entry set. Using build environments This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many build environments only retrieve the last commit, which means you might need to: Change your CI settings github actions: set fetch_depth to 0 ( docs ) gitlab runners: set GIT_DEPTH to 1000 ( docs ) bitbucket pipelines: set clone: depth: full ( docs )","title":"docums-git-authors-plugin"},{"location":"index.html#docums-git-authors-plugin","text":"Lightweight Docums plugin to display git authors of a markdown page.","title":"docums-git-authors-plugin"},{"location":"index.html#setup","text":"Install the plugin using pip3: pip3 install docums-git-authors-plugin Next, add the following lines to your docums.yml : plugins : - search - git-authors If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. Docums enables it by default if there is no plugins entry set. Using build environments This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many build environments only retrieve the last commit, which means you might need to: Change your CI settings github actions: set fetch_depth to 0 ( docs ) gitlab runners: set GIT_DEPTH to 1000 ( docs ) bitbucket pipelines: set clone: depth: full ( docs )","title":"Setup"},{"location":"mailmap.html","text":"Aggregating Authors In some repositories authors may have committed with differing name/email combinations. In order to prevent the output being split it is possible to aggregate authors on arbitrary elements by providing a file .mailmap in the repository's root directory. This is a feature of Git itself. The following example will aggregate the contributions of Jane Doe committed under two email addresses: # .mailmap Jane Doe <jane.doe@company.com> <jane.doe@private-email.com> This will map commits made with the private-email.com to the company address. For more details and further options (e.g. mapping between different names or misspellings etc. see the git-blame documentation .","title":"Aggregating Authors"},{"location":"mailmap.html#aggregating-authors","text":"In some repositories authors may have committed with differing name/email combinations. In order to prevent the output being split it is possible to aggregate authors on arbitrary elements by providing a file .mailmap in the repository's root directory. This is a feature of Git itself. The following example will aggregate the contributions of Jane Doe committed under two email addresses: # .mailmap Jane Doe <jane.doe@company.com> <jane.doe@private-email.com> This will map commits made with the private-email.com to the company address. For more details and further options (e.g. mapping between different names or misspellings etc. see the git-blame documentation .","title":"Aggregating Authors"},{"location":"options.html","text":"Options You can customize the plugin by setting options in your docums.yml file. Here is an example of all the options this plugin offers: plugins : - git-authors : show_contribution : true show_line_count : true count_empty_lines : true fallback_to_empty : false exclude : - index.md enabled : true show_contribution If this option is set to true (default: false ) the contribution of a author is printed as a percentage of (source file) lines per author. The output is suppressed if there is only one author for a page. Example output: Authors: John Doe (33.33%), Jane Doe (66.67%) (more than one author) Authors: John Doe (one author) show_line_count If this option is set to true (default: false ) the number of lines per author is shown. count_empty_lines If this option is set to true (default: false ) empty lines will count towards an authors' contribution. fallback_to_empty If this option is set to true (default: false ) the plugin will work even outside of a proper Git environment, prompting a warning when it's the case, and resulting in empty author list. exclude Default is empty. Specify a list of page source paths (one per line) that should not have author(s) included (excluded from processing by this plugin). This can be useful for example to remove the authors from the front page. The source path of a page is relative to your docs/ folder. You can also use globs instead of full source paths. To exclude docs/subfolder/page.md specify in your docums.yml a line under exclude: with - subfolder/page.md . Some examples: # docums.yml plugins : - git-authors : exclude : - index.md - subfolder/page.md - another_page.md - folder/* enabled Default is true . Enables you to deactivate this plugin. A possible use case is local development where you might want faster build times and/or do not have git available. It's recommended to use this option with an environment variable together with a default fallback (introduced in docums v1.2.0, see docs ). Example: # docums.yml plugins : - git-authors : enabled : !ENV [ ENABLED_GIT_AUTHORS , True ] Which enables you do disable the plugin locally using: export ENABLED_GIT_AUTHORS = false docums serve","title":"Options"},{"location":"options.html#options","text":"You can customize the plugin by setting options in your docums.yml file. Here is an example of all the options this plugin offers: plugins : - git-authors : show_contribution : true show_line_count : true count_empty_lines : true fallback_to_empty : false exclude : - index.md enabled : true","title":"Options"},{"location":"options.html#show_contribution","text":"If this option is set to true (default: false ) the contribution of a author is printed as a percentage of (source file) lines per author. The output is suppressed if there is only one author for a page. Example output: Authors: John Doe (33.33%), Jane Doe (66.67%) (more than one author) Authors: John Doe (one author)","title":"show_contribution"},{"location":"options.html#show_line_count","text":"If this option is set to true (default: false ) the number of lines per author is shown.","title":"show_line_count"},{"location":"options.html#count_empty_lines","text":"If this option is set to true (default: false ) empty lines will count towards an authors' contribution.","title":"count_empty_lines"},{"location":"options.html#fallback_to_empty","text":"If this option is set to true (default: false ) the plugin will work even outside of a proper Git environment, prompting a warning when it's the case, and resulting in empty author list.","title":"fallback_to_empty"},{"location":"options.html#exclude","text":"Default is empty. Specify a list of page source paths (one per line) that should not have author(s) included (excluded from processing by this plugin). This can be useful for example to remove the authors from the front page. The source path of a page is relative to your docs/ folder. You can also use globs instead of full source paths. To exclude docs/subfolder/page.md specify in your docums.yml a line under exclude: with - subfolder/page.md . Some examples: # docums.yml plugins : - git-authors : exclude : - index.md - subfolder/page.md - another_page.md - folder/*","title":"exclude"},{"location":"options.html#enabled","text":"Default is true . Enables you to deactivate this plugin. A possible use case is local development where you might want faster build times and/or do not have git available. It's recommended to use this option with an environment variable together with a default fallback (introduced in docums v1.2.0, see docs ). Example: # docums.yml plugins : - git-authors : enabled : !ENV [ ENABLED_GIT_AUTHORS , True ] Which enables you do disable the plugin locally using: export ENABLED_GIT_AUTHORS = false docums serve","title":"enabled"},{"location":"usage.html","text":"Usage In supported themes no supported themes yet . In markdown pages You can use the following jinja tags to insert content into your markdown pages: {{ git_page_authors }} a summary of the authors of a page. Output wrapped in <span class='git-page-authors'> {{ git_site_authors }} a summary of all authors of all pages in your site. Output wrapped in <span class='git-site-authors'> For example, adding khanhduy1407 could insert: < span class = 'git-page-authors' >< a href = 'mailto:jane@abc.com' > Jane Doe </ a >< a href = 'mailto:john@abc.com' > John Doe </ a ></ span > Which renders as: Jane Doe , John Doe In theme customizations Docums offers possibilities to customize an existing theme . See two examples below: docurial theme If you use the docurial theme you can implement git-authors by overriding a template block : 1) Create a new file main.html in docs/overrides : {% extends \"base.html\" %} {% block content %} {{ super() }} {% if git_page_authors %} < div class = \"md-source-date\" > < small > Authors: {{ git_page_authors | default('enable docums-git-authors-plugin') }} </ small > </ div > {% endif %} {% endblock %} 2) In docums.yml make sure to specify the custom directory with the theme overrides: theme : name : material custom_dir : docs/overrides docums theme In the default Docums theme we can use overriding partials to add the git-authors info below the page content. 1) Create a new file content.html in docs/overrides : <!-- Overwrites content.html base docums theme, taken from https://github.com/khanhduy1407/docums/blob/master/docums/themes/docums/content.html --> {% if page.meta.source %} < div class = \"source-links\" > {% for filename in page.meta.source %} < span class = \"label label-primary\" > {{ filename }} </ span > {% endfor %} </ div > {% endif %} {{ page.content }} {% if git_page_authors %} < p >< small > Authors: {{ git_page_authors | default('enable docums-git-authors-plugin') }} </ small ></ p > {% endif %} 2) In docums.yml make sure to specify the custom directory with the theme overrides: theme : name : docums custom_dir : docs/overrides In theme templates To add more detailed git author information to your theme you can customize a Docums theme or even develop your own . When enabling this plugin, you will have access to the jinja2 variable git_info which contains as dict with the following structure: { 'page_authors' : [ { 'name' : 'Jane Doe' , 'email' : 'jane@abc.com' , 'last_datetime' : datetime . datetime (), 'lines' : 200 , 'contribution' : '40.0%' }, { 'name' : 'John Doe' , 'email' : 'john@abc.com' , 'last_datetime' : datetime . datetime (), 'lines' : 300 , 'contribution' : '60.0%' } ], 'site_authors' : # same structure } Example usage in theme development An example of how to use in your templates: {% if git_info %} {%- for author in git_info.get('page_authors') -%} < a href = \"{{ author.email }}\" title = \"{{ author.name }}\" > {{ author.name }} </ a > , {%- endfor -%} {% endif %} Alternatively, you could use the simple pre-formatted khanhduy1407 to insert a summary of the authors.","title":"Usage"},{"location":"usage.html#usage","text":"","title":"Usage"},{"location":"usage.html#in-supported-themes","text":"no supported themes yet .","title":"In supported themes"},{"location":"usage.html#in-markdown-pages","text":"You can use the following jinja tags to insert content into your markdown pages: {{ git_page_authors }} a summary of the authors of a page. Output wrapped in <span class='git-page-authors'> {{ git_site_authors }} a summary of all authors of all pages in your site. Output wrapped in <span class='git-site-authors'> For example, adding khanhduy1407 could insert: < span class = 'git-page-authors' >< a href = 'mailto:jane@abc.com' > Jane Doe </ a >< a href = 'mailto:john@abc.com' > John Doe </ a ></ span > Which renders as: Jane Doe , John Doe","title":"In markdown pages"},{"location":"usage.html#in-theme-customizations","text":"Docums offers possibilities to customize an existing theme . See two examples below:","title":"In theme customizations"},{"location":"usage.html#docurial-theme","text":"If you use the docurial theme you can implement git-authors by overriding a template block : 1) Create a new file main.html in docs/overrides : {% extends \"base.html\" %} {% block content %} {{ super() }} {% if git_page_authors %} < div class = \"md-source-date\" > < small > Authors: {{ git_page_authors | default('enable docums-git-authors-plugin') }} </ small > </ div > {% endif %} {% endblock %} 2) In docums.yml make sure to specify the custom directory with the theme overrides: theme : name : material custom_dir : docs/overrides","title":"docurial theme"},{"location":"usage.html#docums-theme","text":"In the default Docums theme we can use overriding partials to add the git-authors info below the page content. 1) Create a new file content.html in docs/overrides : <!-- Overwrites content.html base docums theme, taken from https://github.com/khanhduy1407/docums/blob/master/docums/themes/docums/content.html --> {% if page.meta.source %} < div class = \"source-links\" > {% for filename in page.meta.source %} < span class = \"label label-primary\" > {{ filename }} </ span > {% endfor %} </ div > {% endif %} {{ page.content }} {% if git_page_authors %} < p >< small > Authors: {{ git_page_authors | default('enable docums-git-authors-plugin') }} </ small ></ p > {% endif %} 2) In docums.yml make sure to specify the custom directory with the theme overrides: theme : name : docums custom_dir : docs/overrides","title":"docums theme"},{"location":"usage.html#in-theme-templates","text":"To add more detailed git author information to your theme you can customize a Docums theme or even develop your own . When enabling this plugin, you will have access to the jinja2 variable git_info which contains as dict with the following structure: { 'page_authors' : [ { 'name' : 'Jane Doe' , 'email' : 'jane@abc.com' , 'last_datetime' : datetime . datetime (), 'lines' : 200 , 'contribution' : '40.0%' }, { 'name' : 'John Doe' , 'email' : 'john@abc.com' , 'last_datetime' : datetime . datetime (), 'lines' : 300 , 'contribution' : '60.0%' } ], 'site_authors' : # same structure }","title":"In theme templates"},{"location":"usage.html#example-usage-in-theme-development","text":"An example of how to use in your templates: {% if git_info %} {%- for author in git_info.get('page_authors') -%} < a href = \"{{ author.email }}\" title = \"{{ author.name }}\" > {{ author.name }} </ a > , {%- endfor -%} {% endif %} Alternatively, you could use the simple pre-formatted khanhduy1407 to insert a summary of the authors.","title":"Example usage in theme development"}]}